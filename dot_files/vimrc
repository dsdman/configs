" basic features of vim
set shortmess=I "disable welcome screen
set showmatch "highlight matching () and {} and []
colo default
set t_Co=256 "256 color
set number "line numbers
set relativenumber
set background=dark
set ruler "ruler
set laststatus=2 "don't waste space by showing whole statusline
set showmode "show mode you are in
set mouse=a "mouse 
set noswapfile "disable swap file
set splitright "split right
set splitbelow "split below
set encoding=utf-8 "enable unicode encoding
filetype on
filetype plugin indent on
filetype plugin on
set completefunc=syntaxcomplete#Complete
set omnifunc=syntaxcomplete#Complete

" tab completion
set complete=k "Global autocomplete
set completeopt+=longest "show complete tab completions
set path +=** " tab-completion for everything
set wildmenu "display all matches when completing

" searching
set nohlsearch " disable highlight searches
set incsearch "enable increment search

" tabs and formatting
set tabstop=2 "make two columns the standard tab
set shiftwidth=2 "indent 2
set autoindent "Automatically indent
set softtabstop=2 "makes it work for backspace and delete
set expandtab "use spaces 
set backspace=indent,eol,start "make backspace complete

" leader bindings
set <F1>=<C-v><F1>
let mapleader = " "
nnoremap <leader>w :w<cr>
nnoremap <leader>W :w
nnoremap <leader>q :q!<cr>
nnoremap <leader>Q :q
nnoremap <leader>n :set hlsearch!<cr>
nnoremap <leader>g <C-G>
nnoremap <leader>r <C-R>
nnoremap <leader>R :Shell 
nnoremap <leader>te :tabedit 
nnoremap <leader>v :vsplit 
nnoremap <leader>h :split 
nnoremap <leader>s <C-W>w
nnoremap <leader>d <C-D>
nnoremap <leader>u <C-U>
nnoremap <leader>a :syntax off<cr>
nnoremap <leader>A :syntax on<cr>
nnoremap <F1> :!st &> /dev/null &<cr><cr>
"nnoremap <Leader>f :NERDTreeToggle<Enter>

" Move around splits and tabs easier
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
nnoremap <c-tab> gt
nnoremap <c-shift-tab> gT


" custom commands
command HexEdit execute "%!xxd"
command Hex2Text execute "%!xxd -r"

" menu customization
"hi! Pmenu ctermfg=grey ctermbg=black
"set completeopt-=preview "disable preview window

"highlight the line number
hi clear CursorLine
augroup CLClear
    autocmd! ColorScheme * hi clear CursorLine
augroup END
hi CursorLineNR cterm=bold
augroup CLNRSet
    autocmd! ColorScheme * hi CursorLineNR cterm=bold
augroup END

"tabline/statusbar configuration
set showtabline=1  " 0, 1 or 2; when to use a tab pages line
set tabline=%!MyTabLine()  " custom tab pages line
function MyTabLine()
        let s = '' " complete tabline goes here
        " loop through each tab page
        for t in range(tabpagenr('$'))
                " set highlight
                if t + 1 == tabpagenr()
                        let s .= '%#TabLineSel#'
                else
                        let s .= '%#TabLine#'
                endif
                " set the tab page number (for mouse clicks)
                let s .= '%' . (t + 1) . 'T'
                let s .= ' '
                " set page number string
                let s .= t + 1 . ' '
                " get buffer names and statuses
                let n = ''      "temp string for buffer names while we loop and check buftype
                let m = 0       " &modified counter
                let bc = len(tabpagebuflist(t + 1))     "counter to avoid last ' '
                " loop through each buffer in a tab
                for b in tabpagebuflist(t + 1)
                        " buffer types: quickfix gets a [Q], help gets [H]{base fname}
                        " others get 1dir/2dir/3dir/fname shortened to 1/2/3/fname
                        if getbufvar( b, "&buftype" ) == 'help'
                                let n .= '[H]' . fnamemodify( bufname(b), ':t:s/.txt$//' )
                        elseif getbufvar( b, "&buftype" ) == 'quickfix'
                                let n .= '[Q]'
                        else
                                let n .= pathshorten(bufname(b))
                        endif
                        " check and ++ tab's &modified count
                        if getbufvar( b, "&modified" )
                                let m += 1
                        endif
                        " no final ' ' added...formatting looks better done later
                        if bc > 1
                                let n .= ' '
                        endif
                        let bc -= 1
                endfor
                " add modified label [n+] where n pages in tab are modified
                if m > 0
                        let s .= '[' . m . '+]'
                endif
                " select the highlighting for the buffer names
                " my default highlighting only underlines the active tab
                " buffer names.
                if t + 1 == tabpagenr()
                        let s .= '%#TabLineSel#'
                else
                        let s .= '%#TabLine#'
                endif
                " add buffer names
                if n == ''
                        let s.= '[New]'
                else
                        let s .= n
                endif
                " switch to no underlining and add final space to buffer list
                let s .= ' '
        endfor
        " after the last tab fill with TabLineFill and reset tab page nr
        let s .= '%#TabLineFill#%T'
        " right-align the label to close the current tab page
        if tabpagenr('$') > 1
                let s .= '%=%#TabLineFill#%999Xclose'
        endif
        return s
endfunction
