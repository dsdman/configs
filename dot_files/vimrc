" basic features of vim
set shortmess=I "disable welcome screen
set showmatch "highlight matching () and {} and []
set number "line numbers
set relativenumber
set noshowmode "don't show mode you are in (statusline does it)
set mouse=a "mouse 
set noswapfile "disable swap file
set encoding=utf-8 "enable unicode encoding
filetype plugin indent on
filetype plugin on
set omnifunc=syntaxcomplete#Complete
set autoread " updates files upon changes
au CursorHold * checktime
set title

" Plugin stuff
call plug#begin('~/.config/nvim/plugged')
Plug 'https://github.com/tpope/vim-fugitive'
Plug 'https://github.com/ternjs/tern_for_vim'
Plug 'chriskempson/base16-vim'
Plug 'itchyny/lightline.vim'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'yuezk/vim-js'
Plug 'preservim/nerdcommenter'
Plug 'mattn/emmet-vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
let g:coc_global_extensions = ['coc-emmet', 'coc-css', 'coc-html', 'coc-json', 'coc-prettier', 'coc-tsserver']
Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'
call plug#end()

" color scheme
colorscheme base16-default-dark

" emmet config
let g:user_emmet_leader_key=','
let g:user_emmet_install_global=0
autocmd FileType html,css,javascript,javascript.jsx,javascriptreact EmmetInstall

" fuzzy finder config
nnoremap <C-p> :FZF<CR>
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit'
  \}
let $FZF_DEFAULT_COMMAND = 'ag -g ""'

" tab completion
set complete=k "Global autocomplete
set path +=** " tab-completion for everything
set wildmenu "display all matches when completing

" searching
set nohlsearch " disable highlight searches
set incsearch "enable increment search

" tabs and formatting
set tabstop=2 "make two columns the standard tab
set shiftwidth=2 "indent 2
set autoindent "Automatically indent
set softtabstop=2 "makes it work for backspace and delete
set expandtab "use spaces 
set smarttab
set backspace=indent,eol,start "make backspace complete

" general bindings
let mapleader = " "
nnoremap <leader>s :w<cr>
nnoremap <leader>q :q!<cr>
nnoremap <leader>/ :set hlsearch!<cr>
nnoremap <leader>g <C-G>
nnoremap <leader>r :e!<cr>
nnoremap <leader>d <C-D>
nnoremap <leader>u <C-U>
nnoremap <expr> <leader>y exists('g:syntax_on') ? ':syntax off<CR>' : ':syntax enable<CR>'

" window  bindings
set splitright "split right
set splitbelow "split below
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
nnoremap <M-j> <c-w>+
nnoremap <M-k> <c-w>-
nnoremap <M-l> <c-w>>
nnoremap <M-h> <c-w><
nnoremap <leader>v :ls<cr>:vsplit 
nnoremap <leader>h :ls<cr>:split 

" buffer bindings 
set hidden
nnoremap <leader>l :ls<cr>:b 
nnoremap <leader>n :bn<cr>
nnoremap <leader>p :bp<cr>
nnoremap <leader>w :close<cr>
nnoremap <leader>o <c-w>o
nnoremap <leader>e :ls<cr>:e 
nnoremap <leader>te :ls<cr>:tabedit 

" custom commands
command HexEdit execute "%!xxd"
command Hex2Text execute "%!xxd -r"
